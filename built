warning: package replacement is not used: https://github.com/rust-lang/crates.io-index#winit:0.5.9
       Fresh byteorder v0.3.13
       Fresh gcc v0.3.43
       Fresh fixedbitset v0.1.5
       Fresh fnv v1.0.5
       Fresh smallvec v0.1.8
       Fresh log v0.3.6
       Fresh libc v0.1.12
       Fresh byteorder v0.4.2
       Fresh siphasher v0.2.1
       Fresh petgraph v0.2.9
       Fresh num-traits v0.1.36
       Fresh getopts v0.2.14
       Fresh libc v0.2.18
       Fresh dtoa v0.2.2
       Fresh dtoa v0.4.1
       Fresh utf8-ranges v0.1.3
       Fresh cfg-if v0.1.0
       Fresh lazy_static v0.2.2
       Fresh daggy v0.4.1
       Fresh winapi v0.2.8
       Fresh unix_socket v0.5.0
       Fresh num-integer v0.1.32
       Fresh byteorder v0.5.3
       Fresh pkg-config v0.3.9
       Fresh num-iter v0.1.32
       Fresh serde v0.8.21
       Fresh semver v0.1.20
       Fresh khronos_api v1.0.0
       Fresh memchr v0.1.11
       Fresh rustc_version v0.1.7
       Fresh shared_library v0.1.5
       Fresh rand v0.3.15
       Fresh aho-corasick v0.5.3
       Fresh phf_shared v0.7.21
       Fresh itoa v0.1.1
       Fresh osmesa-sys v0.1.2
       Fresh odds v0.2.25
       Fresh phf_generator v0.7.21
       Fresh phf v0.7.21
       Fresh serde_json v0.8.4
       Fresh rustc-serialize v0.3.22
       Fresh phf_codegen v0.7.21
       Fresh byteorder v1.0.0
       Fresh itoa v0.3.1
       Fresh num-complex v0.1.35
       Fresh num-bigint v0.1.35
       Fresh serde v0.9.10
       Fresh linked-hash-map v0.0.10
       Fresh piston-float v0.3.0
       Fresh serde_json v0.9.8
       Fresh piston-viewport v0.3.0
       Fresh debug-builders v0.1.0
       Fresh target_build_utils v0.3.0
       Fresh unix_socket v0.4.6
       Fresh tempfile v2.1.5
       Fresh backtrace-sys v0.1.10
       Fresh regex-syntax v0.3.9
       Fresh winapi-build v0.1.1
       Fresh nodrop v0.1.8
       Fresh stb_truetype v0.2.0
       Fresh libloading v0.3.2
       Fresh arrayvec v0.3.20
       Fresh num-rational v0.1.35
       Fresh dlib v0.3.1
       Fresh rusttype v0.2.1
       Fresh num v0.1.36
       Fresh kernel32-sys v0.2.2
       Fresh wayland-sys v0.8.4
       Fresh wayland-sys v0.7.8
       Fresh serde v0.6.15
       Fresh thread-id v2.0.0
       Fresh fs2 v0.2.5
       Fresh time v0.1.35
       Fresh serde_json v0.6.1
       Fresh thread_local v0.2.7
       Fresh memmap v0.4.0
       Fresh chrono v0.2.25
       Fresh i3ipc v0.4.2
       Fresh regex v0.1.80
       Fresh x11-dl v2.12.0
       Fresh rustc-demangle v0.1.4
       Fresh bitflags v0.7.0
       Fresh pistoncore-input v0.17.1
       Fresh xml-rs v0.3.5
       Fresh dbghelp-sys v0.2.0
       Fresh gl_generator v0.5.2
       Fresh wayland-scanner v0.7.8
       Fresh wayland-scanner v0.8.4
       Fresh backtrace v0.2.3
       Fresh wayland-client v0.7.8
   Compiling wayland-client v0.8.4
       Fresh wayland-kbd v0.6.3
     Running `rustc --crate-name wayland_client /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/lib.rs --crate-type lib -g --cfg feature=\"default\" --cfg feature=\"cursor\" --cfg feature=\"wayland-sys\" --cfg feature=\"egl\" -C metadata=80fe2cec2beea020 -C extra-filename=-80fe2cec2beea020 --out-dir /home/ben/projects/r3bar/target/debug/deps --emit=dep-info,link -L dependency=/home/ben/projects/r3bar/target/debug/deps --extern wayland_sys=/home/ben/projects/r3bar/target/debug/deps/libwayland_sys-61d599ec838a5355.rlib --extern libc=/home/ben/projects/r3bar/target/debug/deps/liblibc-73c6422e7b19c2f3.rlib --extern bitflags=/home/ben/projects/r3bar/target/debug/deps/libbitflags-725a4e5043ace390.rlib --cap-lints allow`
error[E0425]: unresolved name `wl_display_connect`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/display.rs:52:79
   |
52 |     let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_connect, ::std::ptr::null()) };
   |                                                                               ^ unresolved name

error[E0425]: unresolved name `wl_display_flush`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/display.rs:70:81
   |
70 |         let ret = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_flush, self.ptr() as *mut _) };
   |                                                                                 ^ unresolved name

error[E0425]: unresolved name `wl_display_create_queue`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/display.rs:78:88
   |
78 |         let evq = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_create_queue, self.ptr() as *mut _) };
   |                                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_display_get_error`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/display.rs:90:85
   |
90 |         let err = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_get_error, self.ptr() as *mut _) };
   |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_display_get_protocol_error`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/display.rs:97:69
   |
97 |                 WAYLAND_CLIENT_HANDLE, wl_display_get_protocol_error,
   |                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_display_get_fd`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/display.rs:125:73
    |
125 |         unsafe { ffi_dispatch!( WAYLAND_CLIENT_HANDLE, wl_display_get_fd, self.ptr() as *mut _) }
    |                                                                         ^ unresolved name

error[E0425]: unresolved name `wl_display_disconnect`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/display.rs:131:76
    |
131 |         unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_disconnect, self.ptr() as *mut _) }
    |                                                                            ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:50:39
   |
50 |                 wl_proxy_get_user_data,
   |                                       ^ unresolved name

error[E0425]: unresolved name `wl_proxy_add_dispatcher`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:56:40
   |
56 |                 wl_proxy_add_dispatcher,
   |                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_queue`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:64:35
   |
64 |                 wl_proxy_set_queue,
   |                                   ^ unresolved name

error[E0425]: unresolved name `wl_display_dispatch_queue`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:203:46
    |
203 |                     wl_display_dispatch_queue,
    |                                              ^ unresolved name

error[E0425]: unresolved name `wl_display_dispatch`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:211:40
    |
211 |                     wl_display_dispatch,
    |                                        ^ unresolved name

error[E0425]: unresolved name `wl_display_dispatch_queue_pending`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:236:54
    |
236 |                     wl_display_dispatch_queue_pending,
    |                                                      ^ unresolved name

error[E0425]: unresolved name `wl_display_dispatch_pending`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:244:48
    |
244 |                     wl_display_dispatch_pending,
    |                                                ^ unresolved name

error[E0425]: unresolved name `wl_display_roundtrip_queue`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:268:80
    |
268 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_roundtrip_queue,
    |                                                                                ^ unresolved name

error[E0425]: unresolved name `wl_display_roundtrip`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:272:74
    |
272 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_roundtrip, self.display)
    |                                                                          ^ unresolved name

error[E0425]: unresolved name `wl_display_prepare_read_queue`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:309:83
    |
309 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_prepare_read_queue,
    |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_display_prepare_read`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:313:77
    |
313 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_prepare_read,
    |                                                                             ^ unresolved name

error[E0425]: unresolved name `wl_display_read_events`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:349:87
    |
349 |         let ret = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_read_events, self.display) };
    |                                                                                       ^ unresolved name

error[E0425]: unresolved name `wl_display_cancel_read`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:367:77
    |
367 |         unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_display_cancel_read, self.display) }
    |                                                                             ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/event_queue.rs:397:58
    |
397 |             WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, proxy.ptr()
    |                                                          ^ unresolved name

error[E0425]: unresolved name `wl_egl_window_create`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/egl.rs:41:82
   |
41 |         let ptr = unsafe { ffi_dispatch!(WAYLAND_EGL_HANDLE, wl_egl_window_create,
   |                                                                                  ^ unresolved name

error[E0425]: unresolved name `wl_egl_window_get_attached_size`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/egl.rs:52:83
   |
52 |         unsafe { ffi_dispatch!(WAYLAND_EGL_HANDLE, wl_egl_window_get_attached_size,
   |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_egl_window_resize`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/egl.rs:64:72
   |
64 |         unsafe { ffi_dispatch!(WAYLAND_EGL_HANDLE, wl_egl_window_resize,
   |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_egl_window_destroy`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/egl.rs:79:73
   |
79 |         unsafe { ffi_dispatch!(WAYLAND_EGL_HANDLE, wl_egl_window_destroy, self.ptr); }
   |                                                                         ^ unresolved name

error[E0425]: unresolved name `wl_cursor_theme_load`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/cursor.rs:62:70
   |
62 |             ffi_dispatch!(WAYLAND_CURSOR_HANDLE, wl_cursor_theme_load, cstr.as_ptr(), size as c_int, shm.ptr())
   |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_cursor_theme_load`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/cursor.rs:66:70
   |
66 |             ffi_dispatch!(WAYLAND_CURSOR_HANDLE, wl_cursor_theme_load, ptr::null(), size as c_int, shm.ptr())
   |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_cursor_theme_get_cursor`
  --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/cursor.rs:86:76
   |
86 |             ffi_dispatch!(WAYLAND_CURSOR_HANDLE, wl_cursor_theme_get_cursor, self.theme, cstr.as_ptr())
   |                                                                            ^ unresolved name

error[E0425]: unresolved name `wl_cursor_theme_destroy`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/cursor.rs:102:73
    |
102 |             ffi_dispatch!(WAYLAND_CURSOR_HANDLE, wl_cursor_theme_destroy, self.theme);
    |                                                                         ^ unresolved name

error[E0425]: unresolved name `wl_cursor_frame`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/cursor.rs:136:65
    |
136 |             ffi_dispatch!(WAYLAND_CURSOR_HANDLE, wl_cursor_frame, self.cursor, duration)
    |                                                                 ^ unresolved name

error[E0425]: unresolved name `wl_cursor_frame_and_duration`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/cursor.rs:148:78
    |
148 |             ffi_dispatch!(WAYLAND_CURSOR_HANDLE, wl_cursor_frame_and_duration,
    |                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_cursor_image_get_buffer`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/cursor.rs:168:90
    |
168 |                 let ptr = ffi_dispatch!(WAYLAND_CURSOR_HANDLE, wl_cursor_image_get_buffer, image);
    |                                                                                          ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/cursor.rs:172:80
    |
172 |                     ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr)
    |                                                                                ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
  --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:33:72
   |
33 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
   |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
  --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:37:83
   |
37 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
   |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
  --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:43:94
   |
43 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
   |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
  --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:92:85
   |
92 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_DISPLAY_SYNC, &wl_callback_interface, ptr::null_mut::<wl_proxy>()) };
   |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:102:85
    |
102 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_DISPLAY_GET_REGISTRY, &wl_registry_interface, ptr::null_mut::<wl_proxy>()) };
    |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:158:72
    |
158 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
    |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:162:83
    |
162 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
    |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:168:94
    |
168 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
    |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor_versioned`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:226:95
    |
226 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor_versioned, self.ptr(), WL_REGISTRY_BIND, <T as Proxy>::interface_ptr(), version, name, (*<T as Proxy>::interface_ptr()).name, version, ptr::null_mut::<wl_proxy>()) };
    |                                                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:264:72
    |
264 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
    |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:268:83
    |
268 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
    |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:274:94
    |
274 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
    |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:335:72
    |
335 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
    |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:339:83
    |
339 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
    |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:345:94
    |
345 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
    |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:360:85
    |
360 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_COMPOSITOR_CREATE_SURFACE, &wl_surface_interface, ptr::null_mut::<wl_proxy>()) };
    |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:368:85
    |
368 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_COMPOSITOR_CREATE_REGION, &wl_region_interface, ptr::null_mut::<wl_proxy>()) };
    |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:411:72
    |
411 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
    |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:415:83
    |
415 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
    |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:421:94
    |
421 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
    |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:448:85
    |
448 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_SHM_POOL_CREATE_BUFFER, &wl_buffer_interface, ptr::null_mut::<wl_proxy>(), offset, width, height, stride, format) };
    |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:463:63
    |
463 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHM_POOL_DESTROY) };
    |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:467:43
    |
467 |                     wl_proxy_get_user_data,
    |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:471:70
    |
471 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
    |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:483:63
    |
483 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHM_POOL_RESIZE, size) };
    |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:527:72
    |
527 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
    |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:531:83
    |
531 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
    |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:537:94
    |
537 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
    |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:738:85
    |
738 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_SHM_CREATE_POOL, &wl_shm_pool_interface, ptr::null_mut::<wl_proxy>(), fd, size) };
    |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:779:72
    |
779 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
    |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:783:83
    |
783 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
    |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:789:94
    |
789 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
    |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:836:63
    |
836 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_BUFFER_DESTROY) };
    |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:840:43
    |
840 |                     wl_proxy_get_user_data,
    |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:844:70
    |
844 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
    |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:886:72
    |
886 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
    |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:890:83
    |
890 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
    |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
   --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:896:94
    |
896 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
    |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1021:63
     |
1021 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_OFFER_ACCEPT, serial, mime_type.as_ref().map(|s| s.as_ptr()).unwrap_or(ptr::null())) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1044:63
     |
1044 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_OFFER_RECEIVE, mime_type.as_ptr(), fd) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1054:63
     |
1054 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_OFFER_DESTROY) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1058:43
     |
1058 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1062:70
     |
1062 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1081:63
     |
1081 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_OFFER_FINISH) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1119:63
     |
1119 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_OFFER_SET_ACTIONS, dnd_actions, preferred_action) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1158:72
     |
1158 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1162:83
     |
1162 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1168:94
     |
1168 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1322:63
     |
1322 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_SOURCE_OFFER, mime_type.as_ptr()) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1332:63
     |
1332 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_SOURCE_DESTROY) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1336:43
     |
1336 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1340:70
     |
1340 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1361:63
     |
1361 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_SOURCE_SET_ACTIONS, dnd_actions) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1401:72
     |
1401 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1405:83
     |
1405 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1411:94
     |
1411 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1567:63
     |
1567 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_DEVICE_START_DRAG, source.map(Proxy::ptr).unwrap_or(ptr::null_mut()), origin.ptr(), icon.map(Proxy::ptr).unwrap_or(ptr::null_mut()), serial) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1578:63
     |
1578 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_DEVICE_SET_SELECTION, source.map(Proxy::ptr).unwrap_or(ptr::null_mut()), serial) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1588:63
     |
1588 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_DATA_DEVICE_RELEASE) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1592:43
     |
1592 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1596:70
     |
1596 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1642:72
     |
1642 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1646:83
     |
1646 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1652:94
     |
1652 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1705:85
     |
1705 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_DATA_DEVICE_MANAGER_CREATE_DATA_SOURCE, &wl_data_source_interface, ptr::null_mut::<wl_proxy>()) };
     |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1713:85
     |
1713 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_DATA_DEVICE_MANAGER_GET_DATA_DEVICE, &wl_data_device_interface, ptr::null_mut::<wl_proxy>(), seat.ptr()) };
     |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1754:72
     |
1754 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1758:83
     |
1758 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1764:94
     |
1764 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1798:85
     |
1798 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_SHELL_GET_SHELL_SURFACE, &wl_shell_surface_interface, ptr::null_mut::<wl_proxy>(), surface.ptr()) };
     |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1845:72
     |
1845 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1849:83
     |
1849 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1855:94
     |
1855 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:1997:63
     |
1997 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_PONG, serial) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2007:63
     |
2007 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_MOVE, seat.ptr(), serial) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2017:63
     |
2017 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_RESIZE, seat.ptr(), serial, edges) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2025:63
     |
2025 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_SET_TOPLEVEL) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2037:63
     |
2037 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_SET_TRANSIENT, parent.ptr(), x, y, flags) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2075:63
     |
2075 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_SET_FULLSCREEN, method, framerate, output.map(Proxy::ptr).unwrap_or(ptr::null_mut())) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2099:63
     |
2099 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_SET_POPUP, seat.ptr(), serial, parent.ptr(), x, y, flags) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2122:63
     |
2122 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_SET_MAXIMIZED, output.map(Proxy::ptr).unwrap_or(ptr::null_mut())) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2135:63
     |
2135 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_SET_TITLE, title.as_ptr()) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2147:63
     |
2147 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SHELL_SURFACE_SET_CLASS, class_.as_ptr()) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2220:72
     |
2220 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2224:83
     |
2224 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2230:94
     |
2230 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2308:63
     |
2308 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SURFACE_DESTROY) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2312:43
     |
2312 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2316:70
     |
2316 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2363:63
     |
2363 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SURFACE_ATTACH, buffer.map(Proxy::ptr).unwrap_or(ptr::null_mut()), x, y) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2391:63
     |
2391 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SURFACE_DAMAGE, x, y, width, height) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2430:85
     |
2430 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_SURFACE_FRAME, &wl_callback_interface, ptr::null_mut::<wl_proxy>()) };
     |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2462:63
     |
2462 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SURFACE_SET_OPAQUE_REGION, region.map(Proxy::ptr).unwrap_or(ptr::null_mut())) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2491:63
     |
2491 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SURFACE_SET_INPUT_REGION, region.map(Proxy::ptr).unwrap_or(ptr::null_mut())) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2515:63
     |
2515 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SURFACE_COMMIT) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2551:63
     |
2551 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SURFACE_SET_BUFFER_TRANSFORM, transform) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2581:63
     |
2581 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SURFACE_SET_BUFFER_SCALE, scale) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2620:63
     |
2620 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SURFACE_DAMAGE_BUFFER, x, y, width, height) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2659:72
     |
2659 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2663:83
     |
2663 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2669:94
     |
2669 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2759:85
     |
2759 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_SEAT_GET_POINTER, &wl_pointer_interface, ptr::null_mut::<wl_proxy>()) };
     |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2774:85
     |
2774 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_SEAT_GET_KEYBOARD, &wl_keyboard_interface, ptr::null_mut::<wl_proxy>()) };
     |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2789:85
     |
2789 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_SEAT_GET_TOUCH, &wl_touch_interface, ptr::null_mut::<wl_proxy>()) };
     |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2801:63
     |
2801 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SEAT_RELEASE) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2805:43
     |
2805 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2809:70
     |
2809 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2853:72
     |
2853 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2857:83
     |
2857 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:2863:94
     |
2863 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3220:63
     |
3220 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_POINTER_SET_CURSOR, serial, surface.map(Proxy::ptr).unwrap_or(ptr::null_mut()), hotspot_x, hotspot_y) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3234:63
     |
3234 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_POINTER_RELEASE) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3238:43
     |
3238 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3242:70
     |
3242 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3280:72
     |
3280 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3284:83
     |
3284 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3290:94
     |
3290 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3439:63
     |
3439 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_KEYBOARD_RELEASE) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3443:43
     |
3443 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3447:70
     |
3447 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3491:72
     |
3491 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3495:83
     |
3495 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3501:94
     |
3501 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3584:63
     |
3584 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_TOUCH_RELEASE) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3588:43
     |
3588 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3592:70
     |
3592 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3634:72
     |
3634 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3638:83
     |
3638 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3644:94
     |
3644 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3835:63
     |
3835 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_OUTPUT_RELEASE) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3839:43
     |
3839 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3843:70
     |
3843 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3883:72
     |
3883 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3887:83
     |
3887 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3893:94
     |
3893 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3912:63
     |
3912 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_REGION_DESTROY) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3916:43
     |
3916 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3920:70
     |
3920 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3929:63
     |
3929 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_REGION_ADD, x, y, width, height) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3937:63
     |
3937 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_REGION_SUBTRACT, x, y, width, height) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3991:72
     |
3991 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:3995:83
     |
3995 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4001:94
     |
4001 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4037:63
     |
4037 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SUBCOMPOSITOR_DESTROY) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4041:43
     |
4041 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4045:70
     |
4045 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal_constructor`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4060:85
     |
4060 | let ptr = unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal_constructor, self.ptr(), WL_SUBCOMPOSITOR_GET_SUBSURFACE, &wl_subsurface_interface, ptr::null_mut::<wl_proxy>(), surface.ptr(), parent.ptr()) };
     |                                                                                     ^ unresolved name

error[E0425]: unresolved name `wl_proxy_set_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4145:72
     |
4145 |             ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_set_user_data, ptr, data as *mut c_void);
     |                                                                        ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4149:83
     |
4149 |             let data = ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_user_data, ptr) as *mut (*mut c_void, Arc<(AtomicBool, AtomicPtr<()>)>);
     |                                                                                   ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_version`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4155:94
     |
4155 | fn version(&self) -> u32 { unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_get_version, self.ptr()) } }
     |                                                                                              ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4197:63
     |
4197 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SUBSURFACE_DESTROY) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_get_user_data`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4201:43
     |
4201 |                     wl_proxy_get_user_data,
     |                                           ^ unresolved name

error[E0425]: unresolved name `wl_proxy_destroy`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4205:70
     |
4205 |                 ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_destroy, self.ptr());
     |                                                                      ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4229:63
     |
4229 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SUBSURFACE_SET_POSITION, x, y) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4251:63
     |
4251 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SUBSURFACE_PLACE_ABOVE, sibling.ptr()) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4260:63
     |
4260 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SUBSURFACE_PLACE_BELOW, sibling.ptr()) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4280:63
     |
4280 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SUBSURFACE_SET_SYNC) };
     |                                                               ^ unresolved name

error[E0425]: unresolved name `wl_proxy_marshal`
    --> /home/ben/projects/r3bar/target/debug/build/wayland-client-71575a7f761a32c4/out/wayland_api.rs:4306:63
     |
4306 | unsafe { ffi_dispatch!(WAYLAND_CLIENT_HANDLE, wl_proxy_marshal, self.ptr(), WL_SUBSURFACE_SET_DESYNC) };
     |                                                               ^ unresolved name

error: aborting due to 191 previous errors

error: Could not compile `wayland-client`.

Caused by:
  process didn't exit successfully: `rustc --crate-name wayland_client /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.8.4/src/lib.rs --crate-type lib -g --cfg feature="default" --cfg feature="cursor" --cfg feature="wayland-sys" --cfg feature="egl" -C metadata=80fe2cec2beea020 -C extra-filename=-80fe2cec2beea020 --out-dir /home/ben/projects/r3bar/target/debug/deps --emit=dep-info,link -L dependency=/home/ben/projects/r3bar/target/debug/deps --extern wayland_sys=/home/ben/projects/r3bar/target/debug/deps/libwayland_sys-61d599ec838a5355.rlib --extern libc=/home/ben/projects/r3bar/target/debug/deps/liblibc-73c6422e7b19c2f3.rlib --extern bitflags=/home/ben/projects/r3bar/target/debug/deps/libbitflags-725a4e5043ace390.rlib --cap-lints allow` (exit code: 101)
